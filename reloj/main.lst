CCS PCM C Compiler, Version 4.032, 62930               18-may.-14 19:54

               Filename: C:\Users\melvi_000\Documents\Pic Compiler\reloj\main.lst

               ROM used: 1792 words (88%)
                         Largest free fragment is 256
               RAM used: 27 (12%) at main() level
                         52 (23%) worst case
               Stack:    7 worst case (2 in main + 5 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   5B2
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  BTFSS  0B.5
001D:  GOTO   020
001E:  BTFSC  0B.2
001F:  GOTO   2E5
0020:  MOVF   22,W
0021:  MOVWF  04
0022:  MOVF   23,W
0023:  MOVWF  77
0024:  MOVF   24,W
0025:  MOVWF  78
0026:  MOVF   25,W
0027:  MOVWF  79
0028:  MOVF   26,W
0029:  MOVWF  7A
002A:  MOVF   27,W
002B:  MOVWF  7B
002C:  MOVF   28,W
002D:  MOVWF  0A
002E:  SWAPF  21,W
002F:  MOVWF  03
0030:  SWAPF  7F,F
0031:  SWAPF  7F,W
0032:  RETFIE
.................... #include "C:\Users\melvi_000\Documents\Pic Compiler\reloj\main.h" 
.................... #include <16F628.h> 
.................... //////// Standard Header file for the PIC16F628 device //////////////// 
.................... #device PIC16F628 
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES XT                       //Crystal osc <= 4mhz 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES PROTECT                  //Code protected from reads 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
....................  
.................... #use delay(clock=4000000) 
*
0221:  MOVLW  45
0222:  MOVWF  04
0223:  BCF    03.7
0224:  MOVF   00,W
0225:  BTFSC  03.2
0226:  GOTO   235
0227:  MOVLW  01
0228:  MOVWF  78
0229:  CLRF   77
022A:  DECFSZ 77,F
022B:  GOTO   22A
022C:  DECFSZ 78,F
022D:  GOTO   229
022E:  MOVLW  4A
022F:  MOVWF  77
0230:  DECFSZ 77,F
0231:  GOTO   230
0232:  GOTO   233
0233:  DECFSZ 00,F
0234:  GOTO   227
0235:  RETLW  00
....................  
....................  
....................  
.................... #bit RA1 = 0x05.1 
.................... #bit RA2 = 0x05.2 
.................... #bit RA3 = 0x05.3 
.................... #bit RA4 = 0x05.4 
.................... #bit RA5 = 0x05.5 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
....................  #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    #locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    #locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
01DD:  MOVLW  F0
01DE:  TRIS   6
....................       lcd.rw = 1; 
01DF:  BSF    06.2
....................       delay_cycles(1); 
01E0:  NOP
....................       lcd.enable = 1; 
01E1:  BSF    06.0
....................       delay_cycles(1); 
01E2:  NOP
....................       high = lcd.data; 
01E3:  MOVF   06,W
01E4:  SWAPF  06,W
01E5:  ANDLW  0F
01E6:  MOVWF  4C
....................       lcd.enable = 0; 
01E7:  BCF    06.0
....................       delay_cycles(1); 
01E8:  NOP
....................       lcd.enable = 1; 
01E9:  BSF    06.0
....................       delay_us(1); 
01EA:  NOP
....................       low = lcd.data; 
01EB:  MOVF   06,W
01EC:  SWAPF  06,W
01ED:  ANDLW  0F
01EE:  MOVWF  4B
....................       lcd.enable = 0; 
01EF:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
01F0:  MOVLW  00
01F1:  TRIS   6
....................       return( (high<<4) | low); 
01F2:  SWAPF  4C,W
01F3:  MOVWF  77
01F4:  MOVLW  F0
01F5:  ANDWF  77,F
01F6:  MOVF   77,W
01F7:  IORWF  4B,W
01F8:  MOVWF  78
.................... } 
01F9:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
01FA:  SWAPF  4C,W
01FB:  ANDLW  F0
01FC:  MOVWF  77
01FD:  MOVLW  0F
01FE:  ANDWF  06,W
01FF:  IORWF  77,W
0200:  MOVWF  06
....................       delay_cycles(1); 
0201:  NOP
....................       lcd.enable = 1; 
0202:  BSF    06.0
....................       delay_us(2); 
0203:  GOTO   204
....................       lcd.enable = 0; 
0204:  BCF    06.0
.................... } 
0205:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0206:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0207:  CALL   1DD
0208:  MOVF   78,W
0209:  MOVWF  4B
020A:  BTFSC  4B.7
020B:  GOTO   207
....................       lcd.rs = address; 
020C:  BTFSS  49.0
020D:  BCF    06.1
020E:  BTFSC  49.0
020F:  BSF    06.1
....................       delay_cycles(1); 
0210:  NOP
....................       lcd.rw = 0; 
0211:  BCF    06.2
....................       delay_cycles(1); 
0212:  NOP
....................       lcd.enable = 0; 
0213:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0214:  SWAPF  4A,W
0215:  MOVWF  4B
0216:  MOVLW  0F
0217:  ANDWF  4B,F
0218:  MOVF   4B,W
0219:  MOVWF  4C
021A:  CALL   1FA
....................       lcd_send_nibble(n & 0xf); 
021B:  MOVF   4A,W
021C:  ANDLW  0F
021D:  MOVWF  4B
021E:  MOVWF  4C
021F:  CALL   1FA
.................... } 
0220:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
*
05C2:  MOVLW  00
05C3:  TRIS   6
....................     lcd.rs = 0; 
05C4:  BCF    06.1
....................     lcd.rw = 0; 
05C5:  BCF    06.2
....................     lcd.enable = 0; 
05C6:  BCF    06.0
05C7:  CLRF   29
05C8:  BTFSC  0B.7
05C9:  BSF    29.7
05CA:  BCF    0B.7
....................     delay_ms(15); 
05CB:  MOVLW  0F
05CC:  MOVWF  45
05CD:  CALL   221
05CE:  BTFSC  29.7
05CF:  BSF    0B.7
....................     for(i=1;i<=3;++i) { 
05D0:  MOVLW  01
05D1:  MOVWF  34
05D2:  MOVF   34,W
05D3:  SUBLW  03
05D4:  BTFSS  03.0
05D5:  GOTO   5EA
05D6:  CLRF   29
05D7:  BTFSC  0B.7
05D8:  BSF    29.7
05D9:  BCF    0B.7
....................        lcd_send_nibble(3); 
05DA:  MOVLW  03
05DB:  MOVWF  4C
05DC:  CALL   1FA
05DD:  BTFSC  29.7
05DE:  BSF    0B.7
05DF:  CLRF   29
05E0:  BTFSC  0B.7
05E1:  BSF    29.7
05E2:  BCF    0B.7
....................        delay_ms(5); 
05E3:  MOVLW  05
05E4:  MOVWF  45
05E5:  CALL   221
05E6:  BTFSC  29.7
05E7:  BSF    0B.7
....................     } 
05E8:  INCF   34,F
05E9:  GOTO   5D2
05EA:  CLRF   29
05EB:  BTFSC  0B.7
05EC:  BSF    29.7
05ED:  BCF    0B.7
....................     lcd_send_nibble(2); 
05EE:  MOVLW  02
05EF:  MOVWF  4C
05F0:  CALL   1FA
05F1:  BTFSC  29.7
05F2:  BSF    0B.7
....................     for(i=0;i<=3;++i) 
05F3:  CLRF   34
05F4:  MOVF   34,W
05F5:  SUBLW  03
05F6:  BTFSS  03.0
05F7:  GOTO   607
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
05F8:  MOVF   34,W
05F9:  CALL   033
05FA:  MOVWF  35
05FB:  CLRF   29
05FC:  BTFSC  0B.7
05FD:  BSF    29.7
05FE:  BCF    0B.7
05FF:  CLRF   49
0600:  MOVF   35,W
0601:  MOVWF  4A
0602:  CALL   206
0603:  BTFSC  29.7
0604:  BSF    0B.7
0605:  INCF   34,F
0606:  GOTO   5F4
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
024D:  DECFSZ 46,W
024E:  GOTO   250
024F:  GOTO   253
....................      address=lcd_line_two; 
0250:  MOVLW  40
0251:  MOVWF  47
....................    else 
0252:  GOTO   254
....................      address=0; 
0253:  CLRF   47
....................    address+=x-1; 
0254:  MOVLW  01
0255:  SUBWF  45,W
0256:  ADDWF  47,F
....................    lcd_send_byte(0,0x80|address); 
0257:  MOVF   47,W
0258:  IORLW  80
0259:  MOVWF  48
025A:  CLRF   49
025B:  MOVF   48,W
025C:  MOVWF  4A
025D:  CALL   206
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0236:  MOVF   44,W
0237:  XORLW  0C
0238:  BTFSC  03.2
0239:  GOTO   241
023A:  XORLW  06
023B:  BTFSC  03.2
023C:  GOTO   249
023D:  XORLW  02
023E:  BTFSC  03.2
023F:  GOTO   25F
0240:  GOTO   264
....................      case '\f'   : lcd_send_byte(0,1); 
0241:  CLRF   49
0242:  MOVLW  01
0243:  MOVWF  4A
0244:  CALL   206
....................                    delay_ms(2); 
0245:  MOVLW  02
0246:  MOVWF  45
0247:  CALL   221
....................                                            break; 
0248:  GOTO   26A
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0249:  MOVLW  01
024A:  MOVWF  45
024B:  MOVLW  02
024C:  MOVWF  46
*
025E:  GOTO   26A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
025F:  CLRF   49
0260:  MOVLW  10
0261:  MOVWF  4A
0262:  CALL   206
0263:  GOTO   26A
....................      default     : lcd_send_byte(1,c);     break; 
0264:  MOVLW  01
0265:  MOVWF  49
0266:  MOVF   44,W
0267:  MOVWF  4A
0268:  CALL   206
0269:  GOTO   26A
....................    } 
.................... } 
026A:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... int count = 0; 
*
05B8:  CLRF   2A
.................... int h = 0; 
05B9:  CLRF   2B
.................... int min = 0; 
05BA:  CLRF   2C
.................... int seg = 0; 
05BB:  CLRF   2D
.................... int ah = 0; 
05BC:  CLRF   2E
.................... int amin = 0; 
05BD:  CLRF   2F
.................... int al = 0; 
05BE:  CLRF   30
.................... int alarm = 0; 
05BF:  CLRF   31
.................... int p = 0; 
05C0:  CLRF   32
.................... int mode = 0; 
05C1:  CLRF   33
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................  count++; 
*
02E5:  INCF   2A,F
....................    if (count == 175){ 
02E6:  MOVF   2A,W
02E7:  SUBLW  AF
02E8:  BTFSS  03.2
02E9:  GOTO   4C1
....................       if(alarm == 2){ 
02EA:  MOVF   31,W
02EB:  SUBLW  02
02EC:  BTFSS  03.2
02ED:  GOTO   31F
....................          printf(lcd_putc,"\f Time: %02D:%02D:%02D\n It's time",h,min,seg); 
02EE:  CLRF   3B
02EF:  MOVF   3B,W
02F0:  CALL   03B
02F1:  INCF   3B,F
02F2:  MOVWF  77
02F3:  MOVWF  44
02F4:  CALL   236
02F5:  MOVLW  08
02F6:  SUBWF  3B,W
02F7:  BTFSS  03.2
02F8:  GOTO   2EF
02F9:  MOVF   2B,W
02FA:  MOVWF  3E
02FB:  MOVLW  01
02FC:  MOVWF  3F
02FD:  CALL   280
02FE:  MOVLW  3A
02FF:  MOVWF  44
0300:  CALL   236
0301:  MOVF   2C,W
0302:  MOVWF  3E
0303:  MOVLW  01
0304:  MOVWF  3F
0305:  CALL   280
0306:  MOVLW  3A
0307:  MOVWF  44
0308:  CALL   236
0309:  MOVF   2D,W
030A:  MOVWF  3E
030B:  MOVLW  01
030C:  MOVWF  3F
030D:  CALL   280
030E:  MOVLW  16
030F:  MOVWF  3C
0310:  MOVF   3C,W
0311:  CALL   03B
0312:  INCF   3C,F
0313:  MOVWF  77
0314:  MOVWF  44
0315:  CALL   236
0316:  MOVLW  21
0317:  SUBWF  3C,W
0318:  BTFSS  03.2
0319:  GOTO   310
....................          OUTPUT_HIGH(PIN_A1); 
031A:  BSF    03.5
031B:  BCF    05.1
031C:  BCF    03.5
031D:  BSF    05.1
....................       }else if(mode == 1){ 
031E:  GOTO   4C1
031F:  DECFSZ 33,W
0320:  GOTO   353
....................          printf(lcd_putc,"\f Time: %02D:%02D:  \n Alarm at: %02D:%02D",h,min,ah,amin);   
0321:  CLRF   3B
0322:  MOVF   3B,W
0323:  CALL   061
0324:  INCF   3B,F
0325:  MOVWF  77
0326:  MOVWF  44
0327:  CALL   236
0328:  MOVLW  08
0329:  SUBWF  3B,W
032A:  BTFSS  03.2
032B:  GOTO   322
032C:  MOVF   2B,W
032D:  MOVWF  3E
032E:  MOVLW  01
032F:  MOVWF  3F
0330:  CALL   280
0331:  MOVLW  3A
0332:  MOVWF  44
0333:  CALL   236
0334:  MOVF   2C,W
0335:  MOVWF  3E
0336:  MOVLW  01
0337:  MOVWF  3F
0338:  CALL   280
0339:  MOVLW  11
033A:  MOVWF  3C
033B:  MOVF   3C,W
033C:  CALL   061
033D:  INCF   3C,F
033E:  MOVWF  77
033F:  MOVWF  44
0340:  CALL   236
0341:  MOVLW  20
0342:  SUBWF  3C,W
0343:  BTFSS  03.2
0344:  GOTO   33B
0345:  MOVF   2E,W
0346:  MOVWF  3E
0347:  MOVLW  01
0348:  MOVWF  3F
0349:  CALL   280
034A:  MOVLW  3A
034B:  MOVWF  44
034C:  CALL   236
034D:  MOVF   2F,W
034E:  MOVWF  3E
034F:  MOVLW  01
0350:  MOVWF  3F
0351:  CALL   280
....................       }else if (mode == 2){ 
0352:  GOTO   4C1
0353:  MOVF   33,W
0354:  SUBLW  02
0355:  BTFSS  03.2
0356:  GOTO   392
....................          printf(lcd_putc,"\f Time: %02D:  :%02D\n Alarm at: %02D:%02D",h,seg,ah,amin); 
0357:  CLRF   3B
0358:  MOVF   3B,W
0359:  CALL   08F
035A:  INCF   3B,F
035B:  MOVWF  77
035C:  MOVWF  44
035D:  CALL   236
035E:  MOVLW  08
035F:  SUBWF  3B,W
0360:  BTFSS  03.2
0361:  GOTO   358
0362:  MOVF   2B,W
0363:  MOVWF  3E
0364:  MOVLW  01
0365:  MOVWF  3F
0366:  CALL   280
0367:  MOVLW  0C
0368:  MOVWF  3C
0369:  MOVF   3C,W
036A:  CALL   08F
036B:  INCF   3C,F
036C:  MOVWF  77
036D:  MOVWF  44
036E:  CALL   236
036F:  MOVLW  10
0370:  SUBWF  3C,W
0371:  BTFSS  03.2
0372:  GOTO   369
0373:  MOVF   2D,W
0374:  MOVWF  3E
0375:  MOVLW  01
0376:  MOVWF  3F
0377:  CALL   280
0378:  MOVLW  14
0379:  MOVWF  3D
037A:  MOVF   3D,W
037B:  CALL   08F
037C:  INCF   3D,F
037D:  MOVWF  77
037E:  MOVWF  44
037F:  CALL   236
0380:  MOVLW  20
0381:  SUBWF  3D,W
0382:  BTFSS  03.2
0383:  GOTO   37A
0384:  MOVF   2E,W
0385:  MOVWF  3E
0386:  MOVLW  01
0387:  MOVWF  3F
0388:  CALL   280
0389:  MOVLW  3A
038A:  MOVWF  44
038B:  CALL   236
038C:  MOVF   2F,W
038D:  MOVWF  3E
038E:  MOVLW  01
038F:  MOVWF  3F
0390:  CALL   280
....................       }else if(mode == 3){ 
0391:  GOTO   4C1
0392:  MOVF   33,W
0393:  SUBLW  03
0394:  BTFSS  03.2
0395:  GOTO   3D2
....................          printf(lcd_putc,"\f Time:   :%02D:%02D\n Alarm at: %02D:%02D",min,seg,ah,amin); 
0396:  CLRF   3B
0397:  MOVF   3B,W
0398:  CALL   0BD
0399:  INCF   3B,F
039A:  MOVWF  77
039B:  MOVWF  44
039C:  CALL   236
039D:  MOVLW  07
039E:  SUBWF  3B,W
039F:  BTFSS  03.2
03A0:  GOTO   397
03A1:  MOVLW  03
03A2:  MOVWF  3C
03A3:  MOVLW  20
03A4:  MOVWF  44
03A5:  CALL   236
03A6:  DECFSZ 3C,F
03A7:  GOTO   3A3
03A8:  MOVLW  3A
03A9:  MOVWF  44
03AA:  CALL   236
03AB:  MOVF   2C,W
03AC:  MOVWF  3E
03AD:  MOVLW  01
03AE:  MOVWF  3F
03AF:  CALL   280
03B0:  MOVLW  3A
03B1:  MOVWF  44
03B2:  CALL   236
03B3:  MOVF   2D,W
03B4:  MOVWF  3E
03B5:  MOVLW  01
03B6:  MOVWF  3F
03B7:  CALL   280
03B8:  MOVLW  11
03B9:  MOVWF  3D
03BA:  MOVF   3D,W
03BB:  CALL   0BD
03BC:  INCF   3D,F
03BD:  MOVWF  77
03BE:  MOVWF  44
03BF:  CALL   236
03C0:  MOVLW  1D
03C1:  SUBWF  3D,W
03C2:  BTFSS  03.2
03C3:  GOTO   3BA
03C4:  MOVF   2E,W
03C5:  MOVWF  3E
03C6:  MOVLW  01
03C7:  MOVWF  3F
03C8:  CALL   280
03C9:  MOVLW  3A
03CA:  MOVWF  44
03CB:  CALL   236
03CC:  MOVF   2F,W
03CD:  MOVWF  3E
03CE:  MOVLW  01
03CF:  MOVWF  3F
03D0:  CALL   280
....................       }else if (al == 1 && (alarm == 1 || alarm == 2)){ 
03D1:  GOTO   4C1
03D2:  DECFSZ 30,W
03D3:  GOTO   405
03D4:  DECFSZ 31,W
03D5:  GOTO   3D7
03D6:  GOTO   3DB
03D7:  MOVF   31,W
03D8:  SUBLW  02
03D9:  BTFSS  03.2
03DA:  GOTO   405
....................          printf(lcd_putc,"\f Alarm: %02D:  \n       ON",ah);   
03DB:  CLRF   3B
03DC:  MOVF   3B,W
03DD:  CALL   0E8
03DE:  INCF   3B,F
03DF:  MOVWF  77
03E0:  MOVWF  44
03E1:  CALL   236
03E2:  MOVLW  09
03E3:  SUBWF  3B,W
03E4:  BTFSS  03.2
03E5:  GOTO   3DC
03E6:  MOVF   2E,W
03E7:  MOVWF  3E
03E8:  MOVLW  01
03E9:  MOVWF  3F
03EA:  CALL   280
03EB:  MOVLW  0D
03EC:  MOVWF  3C
03ED:  MOVF   3C,W
03EE:  CALL   0E8
03EF:  INCF   3C,F
03F0:  MOVWF  77
03F1:  MOVWF  44
03F2:  CALL   236
03F3:  MOVLW  11
03F4:  SUBWF  3C,W
03F5:  BTFSS  03.2
03F6:  GOTO   3ED
03F7:  MOVLW  07
03F8:  MOVWF  3D
03F9:  MOVLW  20
03FA:  MOVWF  44
03FB:  CALL   236
03FC:  DECFSZ 3D,F
03FD:  GOTO   3F9
03FE:  MOVLW  4F
03FF:  MOVWF  44
0400:  CALL   236
0401:  MOVLW  4E
0402:  MOVWF  44
0403:  CALL   236
....................       }else if (al == 2 && (alarm == 1 || alarm == 2)){ 
0404:  GOTO   4C1
0405:  MOVF   30,W
0406:  SUBLW  02
0407:  BTFSS  03.2
0408:  GOTO   43B
0409:  DECFSZ 31,W
040A:  GOTO   40C
040B:  GOTO   410
040C:  MOVF   31,W
040D:  SUBLW  02
040E:  BTFSS  03.2
040F:  GOTO   43B
....................          printf(lcd_putc,"\f Alarm:   :%02D\n       ON",amin); 
0410:  CLRF   3B
0411:  MOVF   3B,W
0412:  CALL   100
0413:  INCF   3B,F
0414:  MOVWF  77
0415:  MOVWF  44
0416:  CALL   236
0417:  MOVLW  08
0418:  SUBWF  3B,W
0419:  BTFSS  03.2
041A:  GOTO   411
041B:  MOVLW  03
041C:  MOVWF  3C
041D:  MOVLW  20
041E:  MOVWF  44
041F:  CALL   236
0420:  DECFSZ 3C,F
0421:  GOTO   41D
0422:  MOVLW  3A
0423:  MOVWF  44
0424:  CALL   236
0425:  MOVF   2F,W
0426:  MOVWF  3E
0427:  MOVLW  01
0428:  MOVWF  3F
0429:  CALL   280
042A:  MOVLW  0A
042B:  MOVWF  44
042C:  CALL   236
042D:  MOVLW  07
042E:  MOVWF  3D
042F:  MOVLW  20
0430:  MOVWF  44
0431:  CALL   236
0432:  DECFSZ 3D,F
0433:  GOTO   42F
0434:  MOVLW  4F
0435:  MOVWF  44
0436:  CALL   236
0437:  MOVLW  4E
0438:  MOVWF  44
0439:  CALL   236
....................       }else if (al == 1 && alarm == 0){ 
043A:  GOTO   4C1
043B:  DECFSZ 30,W
043C:  GOTO   46D
043D:  MOVF   31,F
043E:  BTFSS  03.2
043F:  GOTO   46D
....................          printf(lcd_putc,"\f Alarm: %02D:  \n       OFF",ah);   
0440:  CLRF   3B
0441:  MOVF   3B,W
0442:  CALL   115
0443:  INCF   3B,F
0444:  MOVWF  77
0445:  MOVWF  44
0446:  CALL   236
0447:  MOVLW  09
0448:  SUBWF  3B,W
0449:  BTFSS  03.2
044A:  GOTO   441
044B:  MOVF   2E,W
044C:  MOVWF  3E
044D:  MOVLW  01
044E:  MOVWF  3F
044F:  CALL   280
0450:  MOVLW  0D
0451:  MOVWF  3C
0452:  MOVF   3C,W
0453:  CALL   115
0454:  INCF   3C,F
0455:  MOVWF  77
0456:  MOVWF  44
0457:  CALL   236
0458:  MOVLW  11
0459:  SUBWF  3C,W
045A:  BTFSS  03.2
045B:  GOTO   452
045C:  MOVLW  07
045D:  MOVWF  3D
045E:  MOVLW  20
045F:  MOVWF  44
0460:  CALL   236
0461:  DECFSZ 3D,F
0462:  GOTO   45E
0463:  MOVLW  4F
0464:  MOVWF  44
0465:  CALL   236
0466:  MOVLW  46
0467:  MOVWF  44
0468:  CALL   236
0469:  MOVLW  46
046A:  MOVWF  44
046B:  CALL   236
....................       }else if (al == 2 && alarm == 0){ 
046C:  GOTO   4C1
046D:  MOVF   30,W
046E:  SUBLW  02
046F:  BTFSS  03.2
0470:  GOTO   4A2
0471:  MOVF   31,F
0472:  BTFSS  03.2
0473:  GOTO   4A2
....................          printf(lcd_putc,"\f Alarm:   :%02D\n       OFF",amin); 
0474:  CLRF   3B
0475:  MOVF   3B,W
0476:  CALL   12E
0477:  INCF   3B,F
0478:  MOVWF  77
0479:  MOVWF  44
047A:  CALL   236
047B:  MOVLW  08
047C:  SUBWF  3B,W
047D:  BTFSS  03.2
047E:  GOTO   475
047F:  MOVLW  03
0480:  MOVWF  3C
0481:  MOVLW  20
0482:  MOVWF  44
0483:  CALL   236
0484:  DECFSZ 3C,F
0485:  GOTO   481
0486:  MOVLW  3A
0487:  MOVWF  44
0488:  CALL   236
0489:  MOVF   2F,W
048A:  MOVWF  3E
048B:  MOVLW  01
048C:  MOVWF  3F
048D:  CALL   280
048E:  MOVLW  0A
048F:  MOVWF  44
0490:  CALL   236
0491:  MOVLW  07
0492:  MOVWF  3D
0493:  MOVLW  20
0494:  MOVWF  44
0495:  CALL   236
0496:  DECFSZ 3D,F
0497:  GOTO   493
0498:  MOVLW  4F
0499:  MOVWF  44
049A:  CALL   236
049B:  MOVLW  46
049C:  MOVWF  44
049D:  CALL   236
049E:  MOVLW  46
049F:  MOVWF  44
04A0:  CALL   236
....................       }else if (al == 3){ 
04A1:  GOTO   4C1
04A2:  MOVF   30,W
04A3:  SUBLW  03
04A4:  BTFSS  03.2
04A5:  GOTO   4C1
....................          printf(lcd_putc,"\f Alarm: %02D:%02D\n",ah, amin); 
04A6:  CLRF   3B
04A7:  MOVF   3B,W
04A8:  CALL   144
04A9:  INCF   3B,F
04AA:  MOVWF  77
04AB:  MOVWF  44
04AC:  CALL   236
04AD:  MOVLW  09
04AE:  SUBWF  3B,W
04AF:  BTFSS  03.2
04B0:  GOTO   4A7
04B1:  MOVF   2E,W
04B2:  MOVWF  3E
04B3:  MOVLW  01
04B4:  MOVWF  3F
04B5:  CALL   280
04B6:  MOVLW  3A
04B7:  MOVWF  44
04B8:  CALL   236
04B9:  MOVF   2F,W
04BA:  MOVWF  3E
04BB:  MOVLW  01
04BC:  MOVWF  3F
04BD:  CALL   280
04BE:  MOVLW  0A
04BF:  MOVWF  44
04C0:  CALL   236
....................       } 
....................    } 
....................    if (count == 250){ 
04C1:  MOVF   2A,W
04C2:  SUBLW  FA
04C3:  BTFSS  03.2
04C4:  GOTO   5AF
....................       count = 0; 
04C5:  CLRF   2A
....................       if(seg == 60){ 
04C6:  MOVF   2D,W
04C7:  SUBLW  3C
04C8:  BTFSS  03.2
04C9:  GOTO   4DD
....................          seg = 0; 
04CA:  CLRF   2D
....................          min++; 
04CB:  INCF   2C,F
....................          if(alarm == 2){ 
04CC:  MOVF   31,W
04CD:  SUBLW  02
04CE:  BTFSS  03.2
04CF:  GOTO   4D2
....................             alarm = 1; 
04D0:  MOVLW  01
04D1:  MOVWF  31
....................          } 
....................          if(min == 60){ 
04D2:  MOVF   2C,W
04D3:  SUBLW  3C
04D4:  BTFSS  03.2
04D5:  GOTO   4DD
....................             min = 0; 
04D6:  CLRF   2C
....................             h++; 
04D7:  INCF   2B,F
....................             if(h == 24){ 
04D8:  MOVF   2B,W
04D9:  SUBLW  18
04DA:  BTFSS  03.2
04DB:  GOTO   4DD
....................             h = 0; 
04DC:  CLRF   2B
....................             } 
....................          } 
....................       } 
....................       if(alarm == 2){ 
04DD:  MOVF   31,W
04DE:  SUBLW  02
04DF:  BTFSS  03.2
04E0:  GOTO   509
....................          printf(lcd_putc,"\f Time: %02D:%02D:%02D\n",h,min,seg); 
04E1:  CLRF   3B
04E2:  MOVF   3B,W
04E3:  CALL   15C
04E4:  INCF   3B,F
04E5:  MOVWF  77
04E6:  MOVWF  44
04E7:  CALL   236
04E8:  MOVLW  08
04E9:  SUBWF  3B,W
04EA:  BTFSS  03.2
04EB:  GOTO   4E2
04EC:  MOVF   2B,W
04ED:  MOVWF  3E
04EE:  MOVLW  01
04EF:  MOVWF  3F
04F0:  CALL   280
04F1:  MOVLW  3A
04F2:  MOVWF  44
04F3:  CALL   236
04F4:  MOVF   2C,W
04F5:  MOVWF  3E
04F6:  MOVLW  01
04F7:  MOVWF  3F
04F8:  CALL   280
04F9:  MOVLW  3A
04FA:  MOVWF  44
04FB:  CALL   236
04FC:  MOVF   2D,W
04FD:  MOVWF  3E
04FE:  MOVLW  01
04FF:  MOVWF  3F
0500:  CALL   280
0501:  MOVLW  0A
0502:  MOVWF  44
0503:  CALL   236
....................          OUTPUT_LOW(PIN_A1); 
0504:  BSF    03.5
0505:  BCF    05.1
0506:  BCF    03.5
0507:  BCF    05.1
....................       }else if(al == 0){ 
0508:  GOTO   59D
0509:  MOVF   30,F
050A:  BTFSS  03.2
050B:  GOTO   546
....................          printf(lcd_putc,"\f Time: %02D:%02D:%02D\n Alarm at: %02D:%02D",h,min,seg,ah,amin); 
050C:  CLRF   3B
050D:  MOVF   3B,W
050E:  CALL   178
050F:  INCF   3B,F
0510:  MOVWF  77
0511:  MOVWF  44
0512:  CALL   236
0513:  MOVLW  08
0514:  SUBWF  3B,W
0515:  BTFSS  03.2
0516:  GOTO   50D
0517:  MOVF   2B,W
0518:  MOVWF  3E
0519:  MOVLW  01
051A:  MOVWF  3F
051B:  CALL   280
051C:  MOVLW  3A
051D:  MOVWF  44
051E:  CALL   236
051F:  MOVF   2C,W
0520:  MOVWF  3E
0521:  MOVLW  01
0522:  MOVWF  3F
0523:  CALL   280
0524:  MOVLW  3A
0525:  MOVWF  44
0526:  CALL   236
0527:  MOVF   2D,W
0528:  MOVWF  3E
0529:  MOVLW  01
052A:  MOVWF  3F
052B:  CALL   280
052C:  MOVLW  16
052D:  MOVWF  3C
052E:  MOVF   3C,W
052F:  CALL   178
0530:  INCF   3C,F
0531:  MOVWF  77
0532:  MOVWF  44
0533:  CALL   236
0534:  MOVLW  22
0535:  SUBWF  3C,W
0536:  BTFSS  03.2
0537:  GOTO   52E
0538:  MOVF   2E,W
0539:  MOVWF  3E
053A:  MOVLW  01
053B:  MOVWF  3F
053C:  CALL   280
053D:  MOVLW  3A
053E:  MOVWF  44
053F:  CALL   236
0540:  MOVF   2F,W
0541:  MOVWF  3E
0542:  MOVLW  01
0543:  MOVWF  3F
0544:  CALL   280
....................       }else if (alarm == 0){ 
0545:  GOTO   59D
0546:  MOVF   31,F
0547:  BTFSS  03.2
0548:  GOTO   575
....................          printf(lcd_putc,"\f Alarm: %02D:%02D\n       OFF",ah,amin); 
0549:  CLRF   3B
054A:  MOVF   3B,W
054B:  CALL   1A8
054C:  INCF   3B,F
054D:  MOVWF  77
054E:  MOVWF  44
054F:  CALL   236
0550:  MOVLW  09
0551:  SUBWF  3B,W
0552:  BTFSS  03.2
0553:  GOTO   54A
0554:  MOVF   2E,W
0555:  MOVWF  3E
0556:  MOVLW  01
0557:  MOVWF  3F
0558:  CALL   280
0559:  MOVLW  3A
055A:  MOVWF  44
055B:  CALL   236
055C:  MOVF   2F,W
055D:  MOVWF  3E
055E:  MOVLW  01
055F:  MOVWF  3F
0560:  CALL   280
0561:  MOVLW  0A
0562:  MOVWF  44
0563:  CALL   236
0564:  MOVLW  07
0565:  MOVWF  3C
0566:  MOVLW  20
0567:  MOVWF  44
0568:  CALL   236
0569:  DECFSZ 3C,F
056A:  GOTO   566
056B:  MOVLW  4F
056C:  MOVWF  44
056D:  CALL   236
056E:  MOVLW  46
056F:  MOVWF  44
0570:  CALL   236
0571:  MOVLW  46
0572:  MOVWF  44
0573:  CALL   236
....................       }else{ 
0574:  GOTO   59D
....................          printf(lcd_putc,"\f Alarm: %02D:%02D\n       ON",ah,amin); 
0575:  CLRF   3B
0576:  MOVF   3B,W
0577:  CALL   1C3
0578:  INCF   3B,F
0579:  MOVWF  77
057A:  MOVWF  44
057B:  CALL   236
057C:  MOVLW  09
057D:  SUBWF  3B,W
057E:  BTFSS  03.2
057F:  GOTO   576
0580:  MOVF   2E,W
0581:  MOVWF  3E
0582:  MOVLW  01
0583:  MOVWF  3F
0584:  CALL   280
0585:  MOVLW  3A
0586:  MOVWF  44
0587:  CALL   236
0588:  MOVF   2F,W
0589:  MOVWF  3E
058A:  MOVLW  01
058B:  MOVWF  3F
058C:  CALL   280
058D:  MOVLW  0A
058E:  MOVWF  44
058F:  CALL   236
0590:  MOVLW  07
0591:  MOVWF  3C
0592:  MOVLW  20
0593:  MOVWF  44
0594:  CALL   236
0595:  DECFSZ 3C,F
0596:  GOTO   592
0597:  MOVLW  4F
0598:  MOVWF  44
0599:  CALL   236
059A:  MOVLW  4E
059B:  MOVWF  44
059C:  CALL   236
....................       } 
....................       if(h == ah && min == amin && alarm == 1 && seg == 0){ 
059D:  MOVF   2E,W
059E:  SUBWF  2B,W
059F:  BTFSS  03.2
05A0:  GOTO   5AC
05A1:  MOVF   2F,W
05A2:  SUBWF  2C,W
05A3:  BTFSS  03.2
05A4:  GOTO   5AC
05A5:  DECFSZ 31,W
05A6:  GOTO   5AC
05A7:  MOVF   2D,F
05A8:  BTFSS  03.2
05A9:  GOTO   5AC
....................          alarm = 2; 
05AA:  MOVLW  02
05AB:  MOVWF  31
....................       } 
....................       seg++; 
05AC:  INCF   2D,F
....................       set_TIMER0(0x06); //inicializa el timer0 
05AD:  MOVLW  06
05AE:  MOVWF  01
....................    } 
.................... } 
....................  
....................  
05AF:  BCF    0B.2
05B0:  BCF    0A.3
05B1:  GOTO   020
.................... void main() 
.................... { 
05B2:  CLRF   04
05B3:  BCF    03.7
05B4:  MOVLW  1F
05B5:  ANDWF  03,F
05B6:  MOVLW  07
05B7:  MOVWF  1F
....................    lcd_init(); 
....................    SET_TRIS_A(0b00111100); 
*
0607:  MOVLW  3C
0608:  TRIS   5
....................    SET_TRIS_B(0b01000000); 
0609:  MOVLW  40
060A:  TRIS   6
....................  
....................  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16); 
060B:  BSF    03.5
060C:  MOVF   01,W
060D:  ANDLW  C0
060E:  IORLW  03
060F:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0610:  BCF    03.5
0611:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0612:  MOVLW  00
0613:  MOVWF  78
0614:  MOVWF  12
0615:  MOVLW  00
0616:  BSF    03.5
0617:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
0618:  MOVLW  07
0619:  BCF    03.5
061A:  MOVWF  1F
061B:  BSF    03.5
061C:  MOVF   05,W
061D:  MOVLW  03
061E:  MOVWF  77
061F:  DECFSZ 77,F
0620:  GOTO   61F
0621:  BCF    03.5
0622:  MOVF   1F,W
0623:  BCF    0C.6
....................    setup_vref(FALSE); 
0624:  BSF    03.5
0625:  CLRF   1F
....................    enable_interrupts(INT_TIMER0); 
0626:  BCF    03.5
0627:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
0628:  MOVLW  C0
0629:  IORWF  0B,F
....................    set_TIMER0(0x06); 
062A:  MOVLW  06
062B:  MOVWF  01
....................  
....................    while(true){ 
....................       if(RA5 == 1){ 
062C:  BTFSS  05.5
062D:  GOTO   647
....................       if (alarm == 2){ 
062E:  MOVF   31,W
062F:  SUBLW  02
0630:  BTFSS  03.2
0631:  GOTO   639
....................             alarm = 1; 
0632:  MOVLW  01
0633:  MOVWF  31
....................             OUTPUT_LOW(PIN_A1); 
0634:  BSF    03.5
0635:  BCF    05.1
0636:  BCF    03.5
0637:  BCF    05.1
....................             p++; 
0638:  INCF   32,F
....................          } 
....................          while(RA5 == 1){ 
0639:  BTFSC  05.5
....................          }  
063A:  GOTO   639
....................          if (p != 0){ 
063B:  MOVF   32,F
063C:  BTFSC  03.2
063D:  GOTO   640
....................             p = 0; 
063E:  CLRF   32
....................          }else{ 
063F:  GOTO   647
....................             mode++; 
0640:  INCF   33,F
....................             al = 0; 
0641:  CLRF   30
....................             if(mode == 4){ 
0642:  MOVF   33,W
0643:  SUBLW  04
0644:  BTFSS  03.2
0645:  GOTO   647
....................                mode = 0; 
0646:  CLRF   33
....................             } 
....................          }  
....................       } 
....................        
....................       if(RA4 == 1){ 
0647:  BTFSS  05.4
0648:  GOTO   662
....................          if (alarm == 2){ 
0649:  MOVF   31,W
064A:  SUBLW  02
064B:  BTFSS  03.2
064C:  GOTO   654
....................             alarm = 1; 
064D:  MOVLW  01
064E:  MOVWF  31
....................             OUTPUT_LOW(PIN_A1); 
064F:  BSF    03.5
0650:  BCF    05.1
0651:  BCF    03.5
0652:  BCF    05.1
....................             p++; 
0653:  INCF   32,F
....................          }    
....................          while(RA4 == 1){ 
0654:  BTFSC  05.4
....................          }   
0655:  GOTO   654
....................           
....................          if (p != 0){ 
0656:  MOVF   32,F
0657:  BTFSC  03.2
0658:  GOTO   65B
....................             p = 0; 
0659:  CLRF   32
....................          }else{ 
065A:  GOTO   662
....................             al++; 
065B:  INCF   30,F
....................             mode = 0; 
065C:  CLRF   33
....................             if(al == 4){ 
065D:  MOVF   30,W
065E:  SUBLW  04
065F:  BTFSS  03.2
0660:  GOTO   662
....................                al = 0; 
0661:  CLRF   30
....................             }  
....................          }   
....................        } 
....................        
....................       if(RA3 == 1){ 
0662:  BTFSS  05.3
0663:  GOTO   6AE
....................       if (alarm == 2){ 
0664:  MOVF   31,W
0665:  SUBLW  02
0666:  BTFSS  03.2
0667:  GOTO   66F
....................             alarm = 1; 
0668:  MOVLW  01
0669:  MOVWF  31
....................             OUTPUT_LOW(PIN_A1); 
066A:  BSF    03.5
066B:  BCF    05.1
066C:  BCF    03.5
066D:  BCF    05.1
....................             p++; 
066E:  INCF   32,F
....................          } 
....................          while(RA3 == 1){ 
066F:  BTFSC  05.3
....................          }   
0670:  GOTO   66F
....................          if (p != 0){ 
0671:  MOVF   32,F
0672:  BTFSC  03.2
0673:  GOTO   676
....................             p = 0; 
0674:  CLRF   32
....................          }else{ 
0675:  GOTO   6AE
....................             if(mode == 1){ 
0676:  DECFSZ 33,W
0677:  GOTO   67A
....................                seg = 0; 
0678:  CLRF   2D
....................             }else if (mode == 2){ 
0679:  GOTO   68F
067A:  MOVF   33,W
067B:  SUBLW  02
067C:  BTFSS  03.2
067D:  GOTO   685
....................              min++; 
067E:  INCF   2C,F
....................              if(min == 60){ 
067F:  MOVF   2C,W
0680:  SUBLW  3C
0681:  BTFSS  03.2
0682:  GOTO   684
....................                  min = 0; 
0683:  CLRF   2C
....................              }   
....................             }else if (mode == 3){ 
0684:  GOTO   68F
0685:  MOVF   33,W
0686:  SUBLW  03
0687:  BTFSS  03.2
0688:  GOTO   68F
....................                h++; 
0689:  INCF   2B,F
....................                if(h == 24){ 
068A:  MOVF   2B,W
068B:  SUBLW  18
068C:  BTFSS  03.2
068D:  GOTO   68F
....................                  h = 0; 
068E:  CLRF   2B
....................                } 
....................             } 
....................             if(al == 1){ 
068F:  DECFSZ 30,W
0690:  GOTO   698
....................                amin++; 
0691:  INCF   2F,F
....................                if(amin == 60){ 
0692:  MOVF   2F,W
0693:  SUBLW  3C
0694:  BTFSS  03.2
0695:  GOTO   697
....................                   amin = 0; 
0696:  CLRF   2F
....................                } 
....................             }else if (al == 2){ 
0697:  GOTO   6AE
0698:  MOVF   30,W
0699:  SUBLW  02
069A:  BTFSS  03.2
069B:  GOTO   6A3
....................                ah++; 
069C:  INCF   2E,F
....................                if(ah == 24){ 
069D:  MOVF   2E,W
069E:  SUBLW  18
069F:  BTFSS  03.2
06A0:  GOTO   6A2
....................                   ah = 0; 
06A1:  CLRF   2E
....................                }   
....................             }else if(al == 3){ 
06A2:  GOTO   6AE
06A3:  MOVF   30,W
06A4:  SUBLW  03
06A5:  BTFSS  03.2
06A6:  GOTO   6AE
....................                if(alarm == 0){ 
06A7:  MOVF   31,F
06A8:  BTFSS  03.2
06A9:  GOTO   6AD
....................                   alarm = 1; 
06AA:  MOVLW  01
06AB:  MOVWF  31
....................                }else{ 
06AC:  GOTO   6AE
....................                   alarm = 0; 
06AD:  CLRF   31
....................                }   
....................             } 
....................          } 
....................       } 
....................        
....................       if(RA2 == 1){ 
06AE:  BTFSS  05.2
06AF:  GOTO   6FE
....................       if (alarm == 2){ 
06B0:  MOVF   31,W
06B1:  SUBLW  02
06B2:  BTFSS  03.2
06B3:  GOTO   6BB
....................             alarm = 1; 
06B4:  MOVLW  01
06B5:  MOVWF  31
....................             OUTPUT_LOW(PIN_A1); 
06B6:  BSF    03.5
06B7:  BCF    05.1
06B8:  BCF    03.5
06B9:  BCF    05.1
....................             p++; 
06BA:  INCF   32,F
....................          } 
....................          while(RA2 == 1){ 
06BB:  BTFSC  05.2
....................          }   
06BC:  GOTO   6BB
....................          if (p != 0){ 
06BD:  MOVF   32,F
06BE:  BTFSC  03.2
06BF:  GOTO   6C2
....................             p = 0; 
06C0:  CLRF   32
....................          }else{ 
06C1:  GOTO   6FE
....................             if(mode == 1){ 
06C2:  DECFSZ 33,W
06C3:  GOTO   6C6
....................                seg = 0; 
06C4:  CLRF   2D
....................             }else if (mode == 2){ 
06C5:  GOTO   6DD
06C6:  MOVF   33,W
06C7:  SUBLW  02
06C8:  BTFSS  03.2
06C9:  GOTO   6D2
....................                if(min == 0){ 
06CA:  MOVF   2C,F
06CB:  BTFSS  03.2
06CC:  GOTO   6D0
....................                   min = 59; 
06CD:  MOVLW  3B
06CE:  MOVWF  2C
....................                }else{ 
06CF:  GOTO   6D1
....................                   min--; 
06D0:  DECF   2C,F
....................                } 
....................             }else if (mode == 3){ 
06D1:  GOTO   6DD
06D2:  MOVF   33,W
06D3:  SUBLW  03
06D4:  BTFSS  03.2
06D5:  GOTO   6DD
....................                if(h == 0){ 
06D6:  MOVF   2B,F
06D7:  BTFSS  03.2
06D8:  GOTO   6DC
....................                   h = 23; 
06D9:  MOVLW  17
06DA:  MOVWF  2B
....................                }else{ 
06DB:  GOTO   6DD
....................                   h--; 
06DC:  DECF   2B,F
....................                } 
....................             } 
....................             if(al == 1){ 
06DD:  DECFSZ 30,W
06DE:  GOTO   6E7
....................                if(amin == 0){ 
06DF:  MOVF   2F,F
06E0:  BTFSS  03.2
06E1:  GOTO   6E5
....................                   amin = 59; 
06E2:  MOVLW  3B
06E3:  MOVWF  2F
....................                }else{ 
06E4:  GOTO   6E6
....................                   amin--; 
06E5:  DECF   2F,F
....................                } 
....................             }else if (al == 2){ 
06E6:  GOTO   6FE
06E7:  MOVF   30,W
06E8:  SUBLW  02
06E9:  BTFSS  03.2
06EA:  GOTO   6F3
....................                if(ah == 0){ 
06EB:  MOVF   2E,F
06EC:  BTFSS  03.2
06ED:  GOTO   6F1
....................                   ah = 23; 
06EE:  MOVLW  17
06EF:  MOVWF  2E
....................                }else{ 
06F0:  GOTO   6F2
....................                   ah--; 
06F1:  DECF   2E,F
....................                } 
....................             }else if(al == 3){ 
06F2:  GOTO   6FE
06F3:  MOVF   30,W
06F4:  SUBLW  03
06F5:  BTFSS  03.2
06F6:  GOTO   6FE
....................                if(alarm == 0){ 
06F7:  MOVF   31,F
06F8:  BTFSS  03.2
06F9:  GOTO   6FD
....................                   alarm = 1; 
06FA:  MOVLW  01
06FB:  MOVWF  31
....................                }else{ 
06FC:  GOTO   6FE
....................                   alarm = 0; 
06FD:  CLRF   31
....................                }   
....................             } 
....................          } 
....................       } 
....................        
....................           
....................     } 
06FE:  GOTO   62C
....................           
....................         
....................  
.................... } 
06FF:  SLEEP

Configuration Fuses:
   Word  1: 0309   XT NOWDT NOPUT PROTECT NOBROWNOUT NOMCLR NOLVP NOCPD
